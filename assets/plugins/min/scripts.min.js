var maskWithClipPath = function(_ref) {
    var $wrapper = _ref.$wrapper,
        fromBounds = _ref.fromBounds,
        toBounds = _ref.toBounds,
        _ref$time = _ref.time,
        time = _ref$time === undefined ? 1 : _ref$time,
        _ref$clearProps = _ref.clearProps,
        clearProps = _ref$clearProps === undefined ? true : _ref$clearProps,
        _ref$hide = _ref.hide,
        hide = _ref$hide === undefined ? false : _ref$hide;

    if (hide) TweenMax.set($wrapper, { opacity: 0 });

    var timeline = new TimelineMax({
        onStart: function onStart() {
            if (hide) TweenMax.set($wrapper, { clearProps: 'opacity' });
        },
        onUpdate: function onUpdate() {
            var clipPath = 'polygon(' + fromBounds.reduce(function (a, b) {
                return '' + a + b.x + '% ' + b.y + '%, ';
            }, '').slice(0, -2) + ')';
            TweenMax.set($wrapper, {
                clipPath: clipPath,
                webkitClipPath: clipPath
                // overflow: 'hidden',
            });
        },
        onComplete: function onComplete() {
            if (clearProps) {
                TweenMax.set($wrapper, { clearProps: 'webkitClipPath, clipPath, overflow' }, time);
            }
        }
    });

    toBounds.forEach(function (b, index) {
        timeline.to(fromBounds[index], time, Object.assign({ ease: Power2.easeInOut }, b), 0);
    });

    return timeline;
};

var ANIMATION = {
    fadeIn: function($wrapper) {
        return TweenMax.fromTo($wrapper, 0.3, { opacity: 0 }, { opacity: 1 });
    },
    fadeOut: function($wrapper) {
        return TweenMax.to($wrapper, 0.3, { opacity: 0 });
    },
    unMaskFromLeft: function(params) {
        if (Modernizr.cssclippathpolygon) {
            return maskWithClipPath($.extend({}, params, {
                hide: false,
                fromBounds: [{ x: 100, y: 0 }, { x: 100, y: 0 }, { x: 100, y: 100 }, { x: 100, y: 100 }],
                toBounds: [{ x: 0, y: 0, ease: Power3.easeInOut }, { x: 100, y: 0, ease: Power2.easeInOut }, { x: 100, y: 100, ease: Power3.easeInOut }, { x: 0, y: 100, ease: Power2.easeInOut }]
            }));;
        }
        return ANIMATION.fadeIn(params.$wrapper);
    },
    unMaskFromRight: function(params) {
        if (Modernizr.cssclippathpolygon) {
            return maskWithClipPath($.extend({}, params, {
                hide: true,
                fromBounds: [{ x: 0, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 100 }, { x: 0, y: 100 }],
                toBounds: [{ x: 0, y: 0, ease: Power3.easeInOut }, { x: 100, y: 0, ease: Power2.easeInOut }, { x: 100, y: 100, ease: Power3.easeInOut }, { x: 0, y: 100, ease: Power2.easeInOut }]
            }));;
        }
        return ANIMATION.fadeIn(params.$wrapper);
    },
    unMaskFromTop: function(params) {
        if (Modernizr.cssclippathpolygon) {
            return maskWithClipPath($.extend({}, params, {
                hide: true,
                fromBounds: [{ x: 0, y: 0 }, { x: 100, y: 0 }, { x: 100, y: 0 }, { x: 0, y: 0 }],
                toBounds: [{ x: 0, y: 0, ease: Power2.easeInOut }, { x: 100, y: 0, ease: Power2.easeInOut }, { x: 100, y: 100, ease: Power3.easeInOut }, { x: 0, y: 100, ease: Power2.easeInOut }]
            }));
        }
        return ANIMATION.fadeIn(params.$wrapper);
    },
    unMaskFromBottom: function (params) {
        if (Modernizr.cssclippathpolygon) {
            return maskWithClipPath($.extend({}, params, {
                hide: true,
                fromBounds: [{ x: 0, y: 100 }, { x: 100, y: 100 }, { x: 100, y: 100 }, { x: 0, y: 100 }],
                toBounds: [{ x: 0, y: 0, ease: Power2.easeInOut }, { x: 100, y: 0, ease: Power2.easeInOut }, { x: 100, y: 100, ease: Power3.easeInOut }, { x: 0, y: 100, ease: Power2.easeInOut }]
            }));
        }
        return ANIMATION.fadeIn(params.$wrapper);
    },
    unMaskFromCenter: function(params) {
        if (Modernizr.cssclippathpolygon) {
            return maskWithClipPath($.extend({}, params, {
                hide: true,
                fromBounds: [{ x: 50, y: 50 }, { x: 50, y: 50 }, { x: 50, y: 50 }, { x: 50, y: 50 }],
                toBounds: [{ x: 0, y: 0, ease: Power2.easeInOut }, { x: 100, y: 0, ease: Power2.easeInOut }, { x: 100, y: 100, ease: Power3.easeInOut }, { x: 0, y: 100, ease: Power2.easeInOut }]
            }));
        }
        return ANIMATION.fadeIn(params.$wrapper);
    },
    maskToLeft: function(params) {
        if (Modernizr.cssclippathpolygon) {
            return maskWithClipPath($.extend({}, params, {
                hide: false,
                fromBounds: [{ x: 0, y: 0 }, { x: 100, y: 0 }, { x: 100, y: 100 }, { x: 0, y: 100 }],
                toBounds: [{ x: 0, y: 0, ease: Power3.easeInOut }, { x: 0, y: 0, ease: Power2.easeInOut }, { x: 0, y: 100, ease: Power3.easeInOut }, { x: 0, y: 100, ease: Power2.easeInOut }]
            }));
        }
        return ANIMATION.fadeOut(params.$wrapper);
    },
    maskToRight: function(params) {
        if (Modernizr.cssclippathpolygon) {
            return maskWithClipPath($.extend({}, params, {
                fromBounds: [{ x: 0, y: 0 }, { x: 100, y: 0 }, { x: 100, y: 100 }, { x: 0, y: 100 }],
                toBounds: [{ x: 100, y: 0, ease: Power3.easeInOut }, { x: 100, y: 0, ease: Power2.easeInOut }, { x: 100, y: 100, ease: Power3.easeInOut }, { x: 100, y: 100, ease: Power2.easeInOut }]
            }));
        }
        return ANIMATION.fadeOut(params.$wrapper);
    },
    maskToTop: function(params) {
        if (Modernizr.cssclippathpolygon) {
            return maskWithClipPath($.extend({}, params, {
                fromBounds: [{ x: 0, y: 0 }, { x: 100, y: 0 }, { x: 100, y: 100 }, { x: 0, y: 100 }],
                toBounds: [{ x: 0, y: 0, ease: Power2.easeInOut }, { x: 100, y: 0, ease: Power2.easeInOut }, { x: 100, y: 0, ease: Power3.easeInOut }, { x: 0, y: 0, ease: Power2.easeInOut }]
            }));
        }
        return ANIMATION.fadeOut(params.$wrapper);
    },
    maskToBottom: function (params) {
        if (Modernizr.cssclippathpolygon) {
            return maskWithClipPath($.extend({}, params, {
                fromBounds: [{ x: 0, y: 0 }, { x: 100, y: 0 }, { x: 100, y: 100 }, { x: 0, y: 100 }],
                toBounds: [{ x: 0, y: 100, ease: Power2.easeInOut }, { x: 100, y: 100, ease: Power2.easeInOut }, { x: 100, y: 100, ease: Power3.easeInOut }, { x: 0, y: 100, ease: Power2.easeInOut }]
            }));
        }
        return ANIMATION.fadeOut(params.$wrapper);
    },
    maskToCenter: function(params) {
        if (Modernizr.cssclippathpolygon) {
            return maskWithClipPath($.extend({}, params, {
                fromBounds: [{ x: 0, y: 0 }, { x: 100, y: 0 }, { x: 100, y: 100 }, { x: 0, y: 100 }],
                toBounds: [{ x: 50, y: 50, ease: Power2.easeInOut }, { x: 50, y: 50, ease: Power2.easeInOut }, { x: 50, y: 50, ease: Power3.easeInOut }, { x: 50, y: 50, ease: Power2.easeInOut }]
            }));
        }
        return ANIMATION.fadeOut(params.$wrapper);
    },
}


var tests = [
	// { name: 'svg', value: 'url(#test)' }, // False positive in IE, supports SVG clip-path, but not on HTML element
	// { name: 'inset', value: 'inset(10px 20px 30px 40px)' },
	// { name: 'circle', value: 'circle(60px at center)' },
	// { name: 'ellipse', value: 'ellipse(50% 50% at 50% 50%)' },
	{ name: 'polygon', value: 'polygon(50% 0%, 0% 100%, 100% 100%)' }
];

var t = 0, name, value, prop;

for (; t < tests.length; t++) {
	name = tests[t].name;
	value = tests[t].value;
	Modernizr.addTest('cssclippath' + name, function(){
	// Try using window.CSS.supports
	if ( 'CSS' in window && 'supports' in window.CSS ) {
		for (var i = 0; i < Modernizr._prefixes.length; i++) {
		prop = Modernizr._prefixes[i] + 'clip-path'
		
		if ( window.CSS.supports(prop,value) ) { return true; }
		}
		return false;
	}
	// Otherwise, use Modernizr.testStyles and examine the property manually
	return Modernizr.testStyles('#modernizr { '+Modernizr._prefixes.join('clip-path:'+value+'; ')+' }',function(elem, rule) {
		var style = getComputedStyle(elem),
			clip = style.clipPath;

		if ( !clip || clip == "none" ) {
		clip = false;

		for (var i = 0; i < Modernizr._domPrefixes.length; i++) {
			var test = Modernizr._domPrefixes[i] + 'ClipPath';
			if ( style[test] && style[test] !== "none" ) {
			clip = true;
			break;
			}
		}
		}

		return Modernizr.testProp('clipPath') && clip;
	});
	});

}

var CONST = {
	CtrlManager: undefined,
	html5History: undefined,
	captureMouse: undefined,
	isMobile: window.innerWidth < 750
};
var EVENTS = {
    pageReady: function() {

        CONST.ctrlManager = new CtrlManager();

        $(window)
            .on({
                resize: EVENTS.onResize,
                scroll: EVENTS.onScroll
            })
            .on('mousewheel DOMMouseScroll wheel MozMousePixelScroll', EVENTS.onMouseWheel);

        $('a[href*="' + window.location.hostname + '"]').on('click', function(e) {
            e.preventDefault();
            $(document)
                .trigger('open-layer', { openLayer: 'preload', preventCloseLayer: true })
                .on('open-layer-end', function() {
                    window.location.href = e.target.getAttribute('href');
                })
        })

        CONST.ctrlManager.init()
        $(document).trigger('close-layer', { closeLayer: 'preload' })
        setTimeout(setCustomProperties, 500);
    },
    onScroll: function() {
        CONST.ctrlManager.onScroll()
    },
    onResize: function() {
      setCustomProperties();
      CONST.ctrlManager.onResize()
    },
    onMouseWheel: function(event) {
        CONST.ctrlManager.onMouseWheel(event)
    }
};

function setCustomProperties() {
    var vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', vh + 'px');
    document.documentElement.style.setProperty('--scrollbar-width', UTILS.getScrollbarWidth() + 'px');
    document.documentElement.style.setProperty('--viewport-width', window.innerWidth + 'px');
    document.documentElement.style.setProperty('--viewport-height', window.innerHeight + 'px');
}
var UTILS = {
    captureMouse: function(e) {
        var t = {
                x: 0,
                y: 0,
                event: null
            },
            o = document.body.scrollLeft,
            a = document.documentElement.scrollLeft,
            i = document.body.scrollTop,
            n = document.documentElement.scrollTop,
            l = e.offsetLeft,
            r = e.offsetTop;
        return window.addEventListener && e.addEventListener("mousemove", function(e) {
            var c, s;
            e.pageX || e.pageY ? (c = e.pageX, s = e.pageY) : (c = e.clientX + o + a, s = e.clientY + i + n), c -= l, s -= r, t.x = c, t.y = s, t.event = e
        }, !1), t
    },
    scrollTo: function (offset, speed, wrapper) {
        
        if (offset == "end") {
            offset = $(document).height() - $(window).height()  
        }

        if (offset == "top") {
            offset = 0
        }
        
        if (!wrapper) wrapper = window  

        if (speed == undefined) speed = 1.5
        
        TweenLite.to(wrapper, speed, {
            scrollTo:{
                y: offset,
                autoKill: false
            },
            ease: Expo.easeInOut
        });
    },
    randomString: function() {
        return Math.random().toString(36).substring(7);
    },
    preloadImages: function(imageArray, callback, index) {
        index = index || 0;
        if (imageArray && imageArray.length > index) {
            var img = new Image ();
            img.onload = function() {
                UTILS.preloadImages(imageArray, callback, index + 1);
            }
            img.src = imageArray[index]
        } else {
            callback()
        }
    },
    hexToRgb: function(hex) {
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    },
    getJSONPromise: function(url) {
        return new Promise(function(resolve, reject) {
            $.getJSON(url, resolve)
        })
    },
    setTemplateState: function(state) {
        $('html').attr('data-template-state', state)
    },
    getTemplate: function() {
        return $('html').attr('data-template')
    },
    prevIndex: function(index, length, limit) {
        return index > 0 ? index - 1 : (limit ? 0 : length - 1);
    },
    nextIndex: function(index, length, limit) {
        return index < length - 1 ? index + 1 : (limit ? length - 1 : 0);
    },
    directionByIndex: function(prev, current, length) {
        return (prev === 0 && current === length - 1)
        || (prev > current && prev - current < length - 1)
        ? 'prev'
        : 'next';
    },
    getRenderedSize: function(contains, cWidth, cHeight, width, height, pos) {
        let oRatio = width / height,
            cRatio = cWidth / cHeight;
        return function () {
            if (contains ? (oRatio > cRatio) : (oRatio < cRatio)) {
                this.width = cWidth;
                this.height = cWidth / oRatio;
            } else {
                this.width = cHeight * oRatio;
                this.height = cHeight;
            }
            this.left = (cWidth - this.width) * (pos / 100);
            this.right = this.width + this.left;
            return this;
        }.call({});
    },
    preloadYoutubeApi: function () {
        return new Promise(function(resolve) {
            if (window.YT) {
                resolve();
            } else {
                var tag = document.createElement('script');
                tag.src = "https://www.youtube.com/iframe_api";
                var firstScriptTag = document.getElementsByTagName('script')[0];
                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
                window.onYouTubeIframeAPIReady = function () {
                    delete window.onYouTubeIframeAPIReady;
                    resolve();
                };
            }
        })
    },
    filteredKeys: function (obj, filter) {
        if (!Array.isArray(filter)) {
            filter = [filter.toString()];
        }
        const newObj = {};
        for (i in obj) {
            if (i.includes(filter)) {
                newObj[i] = obj[i];
            }
        }
        return newObj;
    },
    getScrollbarWidth: function() {
        var outer = document.createElement("div");
        outer.style.visibility = "hidden";
        outer.style.width = "100px";
        outer.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps

        document.body.appendChild(outer);

        var widthNoScroll = outer.offsetWidth;
        // force scrollbars
        outer.style.overflow = "scroll";

        // add innerdiv
        var inner = document.createElement("div");
        inner.style.width = "100%";
        outer.appendChild(inner);

        var widthWithScroll = inner.offsetWidth;

        // remove divs
        outer.parentNode.removeChild(outer);

        return widthNoScroll - widthWithScroll;
    }
}

var OPEN_LAYER = [];
var PRELOADED = [];

$.fn.fadeInWithHide = function () {
  TweenLite.fromTo(this, 0.6, { autoAlpha: 0 }, { autoAlpha: 1, ease: Linear.easeNone })
  return this;
};

$.fn.fadeIn = function () {
  TweenLite.to(this, 0.3, { autoAlpha: 1, visibility: 'visible' })
  return this;
};

$.fn.fadeOut = function () {
  TweenLite.to(this, 0.3, { autoAlpha: 0, visibility: 'hidden' })
  return this;
};

window.requestAnimFrame = (function(){
  return  window.requestAnimationFrame       ||
          window.webkitRequestAnimationFrame ||
          window.mozRequestAnimationFrame    ||
          function( callback ){
            window.setTimeout(callback, 1000 / 60);
          };
})();

/* IE11 Polyfill */

/**
 * Hack in support for Function.name for browsers that don't support it.
 * IE, I'm looking at you.
**/
if (Function.prototype.name === undefined && Object.defineProperty !== undefined) {
    Object.defineProperty(Function.prototype, 'name', {
        get: function () {
            var funcNameRegex = /function\s([^(]{1,})\(/;
            var results = (funcNameRegex).exec((this).toString());
            return (results && results.length > 1) ? results[1].trim() : "";
        },
        set: function (value) { }
    });
}

if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            'use strict';
            if (target === undefined || target === null) {
                throw new TypeError('Cannot convert first argument to object');
            }

            var to = Object(target);
            for (var i = 1; i < arguments.length; i++) {
                var nextSource = arguments[i];
                if (nextSource === undefined || nextSource === null) {
                    continue;
                }
                nextSource = Object(nextSource);

                var keysArray = Object.keys(Object(nextSource));
                for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
                    var nextKey = keysArray[nextIndex];
                    var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
                    if (desc !== undefined && desc.enumerable) {
                        to[nextKey] = nextSource[nextKey];
                    }
                }
            }
            return to;
        }
    });
}

Array.prototype.find = Array.prototype.find || function (callback) {
    if (this === null) {
        throw new TypeError('Array.prototype.find called on null or undefined');
    } else if (typeof callback !== 'function') {
        throw new TypeError('callback must be a function');
    }
    var list = Object(this);
    // Makes sures is always has an positive integer as length.
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    for (var i = 0; i < length; i++) {
        var element = list[i];
        if (callback.call(thisArg, element, i, list)) {
            return element;
        }
    }
};
function BaseClass() {
	
	this.initBaseClass = function() {
		if (this.init) this.init()
	}

	this.setWrapper = function(wrapper) {
		this.DOM = {};
		this.DOM.wrapper = wrapper;
	}

	this.destroyBaseClass = function() {
		if (this.destroy) this.destroy()
	}

}
'use strict';

function CtrlManager(params) {

    var lethargy = new Lethargy();
    var params = params || {}
	var ctrl = [];
    var wrapper = {};
    var wrapperIndex = {};

    $(document).on('getControllersByWrapper', function(event, data) {
        return getControllersByWrapper(data);
    });

    var getCtrlById = function(ID) {
        for (var c in ctrl) if (ctrl[c].ID == ID) return ctrl[c]
    }
    
    var checkCtrl = function(elem) {
        if (!window[elem.data('ctrl')]) {
            elem.attr('data-state', 'ready')
            return false;
        }
        return true;
    }
    
    var create = function() {

        $('[data-ctrl]').each(function(i) {

            if (checkCtrl($(this))) {
                
                $(this).attr('data-state', 'ready')
                
                var currentCtrl = new window[$(this).data('ctrl')];
                currentCtrl.setWrapper($(this));
                ctrl.push(currentCtrl);
                
                (wrapper[$(this).data('ctrl')] = wrapper[$(this).data('ctrl')] || []).push($(this))
            }
        
        });

    }

    var getControllersByWrapper = function (params) {
        var controllers = ctrl.filter(function(el) {
            return (
                $.contains(params.wrapper[0], el.DOM.wrapper[0])
                && el.constructor.name === params.type
            )
        })
        return controllers.length === 1 ? controllers[0] : controllers;
    }

    var init = function() {
        
        create()
        callMethodOnCtrl(ctrl, 'initBaseClass')
    
    }

    var callMethodOnCtrl = function(array, method, params) {
       

        for (var t = 0; t < array.length; t++) {
            
            var name = array[t].constructor.name

            if (method == 'initBaseClass') {
                wrapperIndex[name] = wrapperIndex[name] != undefined ? wrapperIndex[name] + 1 : 0
                var selector = wrapper[name][wrapperIndex[name]]
                array[t].DOM.wrapper = selector
            }

            if (array[t][method]) array[t][method]()

        }

    }

    // INTERACTION EVENTS

    var onScroll = function() {
       callMethodOnCtrl(ctrl, 'onScroll')
    }
    
    var onResize = function() {
        callMethodOnCtrl(ctrl, 'onResize')
    }

    var onMouseWheel = function(e) {
        e.stopPropagation();
        if (lethargy.check(e) !== false) {
            callMethodOnCtrl(ctrl, e.delta > 0 ? 'onMouseWheelUp' : 'onMouseWheelDown')
        }
    }
    
    return {
        onScroll: onScroll,
        onResize: onResize,
        onMouseWheel: onMouseWheel,
        init: init,
        getCtrlById: getCtrlById
    }

}
var GsapAnimations = function() {
	
	var fadeIn = function(elem, callback) {

		var timeline = new TimelineMax({
			onComplete: callback || function() {}
		})

		timeline.fromTo(elem, 1, {
			opacity: 0
		}, {
			opacity: 1,
			clearProps: 'opacity'
		})
	}

	var fadeOut = function(elem, callback) {

		var timeline = new TimelineMax({
			onComplete: callback || function() {}
		})

		timeline.fromTo(elem, 1, {
			opacity: 1
		}, {
			opacity: 0,
			clearProps: 'opacity'
		})
	}

	return {
		fadeIn: fadeIn,
		fadeOut: fadeOut
	}

}
function GsapMask(element) {

	var nameSpace = 'GsapMask'
	var element = 'jquery' in element ? element.get(0) : element
	var wrappedElement
	var randomClass
	var methods = {}
	var methodsName = ['slideUp', 'slideRight', 'slideDown', 'slideLeft']
	var elementStyle;
	var sheet;

	var createCSSRule = function() {
		sheet = getStyle()
	}

	var addCSSRule = function(selector, rules, index) {
		var index = index || 0
		if ('insertRule' in sheet) {
			sheet.insertRule(selector + '{' + rules + '}', index);
		} else if ('addRule' in sheet) {
			sheet.addRule(selector, rules, index);
		}
	}

	var getStyle = function() {

		if (!window[nameSpace + '-stylesheet']) {
			var style = document.createElement('style');
			style.setAttribute('class', nameSpace)
			style.setAttribute('media', 'screen')
			style.appendChild(document.createTextNode(''));
			document.head.appendChild(style);
			window[nameSpace + '-stylesheet'] = style.sheet
			return style.sheet;
		} else {
			return window[nameSpace + '-stylesheet']
		}
		
	}

	var getRandomClass = function() {
		return nameSpace + '-' + UTILS.randomString(15)
	}

	var wrapElement = function() {

		var cssElementValue = {
			'style': 0,
			'position': 0,
			'top': 0,
			'right': 0,
			'bottom': 0,
			'left': 0,
			'margin-top': 0,
			'margin-right': 0,
			'margin-bottom': 0,
			'margin-left': 0,
			'padding-top': 0,
			'padding-right': 0,
			'padding-bottom': 0,
			'padding-left': 0,
			'float': 0,
			'display': 0,
			'width': 0,
			'height': 0,
			'color': 'inherit',
			'background-color': 0
		}

		var computedStyle = window.getComputedStyle(element, null)
		for (var c in cssElementValue) cssElementValue[c] = computedStyle.getPropertyValue(c)			

		randomClass = getRandomClass()
		wrappedElement = UTILS.wrap(element, '<span class=\'' + randomClass + '\'></span>')				
		wrappedElement.style.overflow = 'hidden'
		
		element.removeAttribute('style')

		if (UTILS.matches(element, 'svg')) cssElementValue['display'] = 'inline-block'
		
		// CHILDREN MARGIN EXCEPTION

		if (element.children.length > 0) {
			
			var firstChildCS = window.getComputedStyle(element.children[0], null)
			var lastChildCS = window.getComputedStyle(element.children[element.children.length - 1], null)
		 	
		 	var marginTop = firstChildCS.getPropertyValue('margin-top')
		
			if (marginTop.replace('px', '') < 0) {
				cssElementValue['height'] = parseInt(cssElementValue['height'].replace('px', '')) + Math.abs(marginTop.replace('px', '')) + 'px'
				cssElementValue['margin-top'] = parseInt(cssElementValue['margin-top'].replace('px', '')) + parseInt(marginTop.replace('px', '')) + 'px'
				addCSSRule('[class*=\'' + randomClass + '\'] > * > *:first-child', 'margin-top: 0!important')
			}

			var marginBottom = lastChildCS.getPropertyValue('margin-bottom')
			
			if (marginBottom.replace('px', '') < 0) {
				cssElementValue['height'] = parseInt(cssElementValue['height'].replace('px', '')) + Math.abs(marginBottom.replace('px', '')) + 'px'
				addCSSRule('[class*=\'' + randomClass + '\'] > * > *:last-child', 'margin-bottom: 0!important')
			}
			
		}

		for (var c in cssElementValue) {
			
			if (
				c == 'top' && cssElementValue['position'] == 'absolute'
				|| c == 'left' && cssElementValue['position'] == 'absolute'
			) {
				element.style[c] = '0'
				wrappedElement.style[c] = cssElementValue[c]
			} else if (c == 'background-color') {
				element.style[c] = cssElementValue[c]
				wrappedElement.style[c] = 'none'
			} else {
				element.style[c] = 'auto'
				wrappedElement.style[c] = cssElementValue[c]
			}
			
		}

		element.style.opacity = 1

	}

	var unWrapElement = function() {

		if (
			wrappedElement
			&& wrappedElement.parentNode
		) {

			UTILS.unWrap(wrappedElement)
		}	

		if (elementStyle) {
			element.setAttribute('style', elementStyle)
		} else {
			element.removeAttribute('style')
		}

	}

	var destroy = function() {
		unWrapElement()
	}

	for (var m in methodsName) {

		methods[methodsName[m]] = (function(method) {

			var method = method
	
			return function(params) {

				var params = params || {}
				var reverse = params.reverse || false
				var time = params.time || .8
				var ease = params.ease || Expo.easeOut
				var onComplete = params.onComplete || function() {}
				
				if (
					!UTILS.matches(element.parentNode, '.' + randomClass)
				) {
					elementStyle = element.getAttribute('style')
				}

				TweenMax.killTweensOf(element)
				TweenMax.set(element, {
					opacity: 0
				})

				var onStart = function() {

					if (
						!UTILS.matches(element.parentNode, '.' + randomClass)
					) {
						wrapElement()
					}
	
				}

				var timeline = new TimelineMax({
					onStart: onStart,
					onComplete: (function() {
						return function() {
							unWrapElement()
							onComplete()
						}
					})()
				})

				timeline.set(element, {
					x: '0%',
					y: '0%'
				})

				if (!reverse) {
				
					timeline.fromTo(
						element,
						time,
						getTweenFromData(method),
						UTILS.extend(getTweenToData(method), {
							clearProps: 'transform',
							ease: ease
						})
					)
				
				} else {
	
					timeline.fromTo(
						element,
						time,
						getTweenToData(method),
						UTILS.extend(getTweenFromData(method), {
							clearProps: 'transform',
							ease: ease
						})
					)
					
				}

				return timeline
			
			}
			
		})(methodsName[m])

	}

	var getTweenFromData = function(method) {

		var o;

		switch(method) {
			case('slideUp'):
				o = {y: '100%'}	
			break;
			case('slideRight'):
				o = {x: '100%'}	
			break;
			case('slideDown'):
				o = {y: '-100%'}	
			break;
			case('slideLeft'):
				o = {x: '-100%'}	
			break;
		}

		return o

	}

	var getTweenToData = function(method, ease) {

		var o;

		switch(method) {
			case('slideUp'):
			case('slideDown'):
				o = {y: '0%'}	
			break;
			case('slideRight'):
			case('slideLeft'):
				o = {x: '0%'}	
			break;
		}

		o.ease = ease

		return o

	}

	createCSSRule()

	return {
		destroy: destroy,
		slideUp: methods.slideUp,
		slideRight: methods.slideRight,
		slideDown: methods.slideDown,
		slideLeft: methods.slideLeft
	}

}
function CircularBtnCtrl() {

	this.init = function() {
		Object.assign(this.DOM, {
			wrapperCircle: $('.c-circular-btn__wrapper-circle', this.DOM.wrapper),
			circleProgress: $('.c-circular-btn__circle--progress', this.DOM.wrapper),
		})
		
		this.index = 0;
		this.DOM.wrapper
			.on('touchstart mouseenter', this.onMouseEnter.bind(this))
			.on('touchend mouseleave mousedown', this.onMouseLeave.bind(this))

		TweenMax.set(this.DOM.circleProgress, { drawSVG: '0%' });
	}

	this.onMouseEnter = function (event, inverse) {
		if (event && (event.type === 'touchstart' || event.type === 'mouseenter')) {
			TweenLite.to(this.DOM.wrapperCircle, 0.3, {
				scale: 1.12,
			});
		}
		TweenMax.fromTo(this.DOM.circleProgress, 1.4, {
			drawSVG: inverse ? '100% 0%' : '0%',
			transformOrigin: 'center center',
		}, {
			drawSVG: inverse ? '100% 100%' : '100%',
			rotationZ: '+=360',
			ease: Linear.easeNone,
			onComplete: function () {
				this.onMouseEnter(null, this.index % 2 === 0);
				this.index++;
			}.bind(this)
		});
	}

	this.onMouseLeave = function () {
		this.index = 0;

		TweenLite.to(this.DOM.wrapperCircle, 0.3, {
			scale: 1,
			ease: Expo.easeOut,
		});

		TweenMax.to(this.DOM.circleProgress, 1, {
			drawSVG: '0%',
			transformOrigin: 'center center',
			rotationZ: '+=' + (360 - this.DOM.circleProgress[0]._gsTransform.rotation % 360 + 270),
			ease: Power4.easeOut,
		});
	}

	this.anim = function() {
		setTimeout(this.onMouseEnter.bind(this), 200)
		setTimeout(this.onMouseLeave.bind(this), 800);
	}

}

CircularBtnCtrl.prototype = new BaseClass();
CircularBtnCtrl.prototype.constructor = CircularBtnCtrl;
var EditorialAnimation = {
	enter: function (DOM, excludeTitle) {
		var items = DOM.title.add(DOM.subTitle).add(DOM.content);
		if (excludeTitle) items = items.not(DOM.title);
		new TimelineLite()
			.set(DOM.wrapper.add(DOM.wrapper.children()), { clearProps: 'all' })
			.staggerFrom(items, 0.7, {
				y: 100,
				opacity: 0,
				clearProps: 'all',
				ease: Expo.easeOut,
			}, 0.1)
	},
	leave: function (DOM) {
		new TimelineLite()
			.staggerTo(DOM.wrapper.children(), 0.7, {
				y: -100,
				opacity: 0,
				ease: Expo.easeIn,
			}, 0.1)
	},
}
function EditorialCtrl() {
	this.init = function () {
		Object.assign(this.DOM, {
			title: $('.c-editorial__title', this.DOM.wrapper),
			subTitle: $('.c-editorial__subTitle', this.DOM.wrapper),
			content: $('.c-editorial__content', this.DOM.wrapper),
		})
		if (!Modernizr.touchevents) {
			skrollr.init({
				forceHeight: false,
				documentElement: this.DOM.wrapper.parents('.c-layer__scroll')[0],
			});
		}
	}
}

EditorialCtrl.prototype = new BaseClass();
EditorialCtrl.prototype.constructor = EditorialCtrl;
function FullscreenCtrl() {
  this.init = function () {
    this.DOM.btn = this.DOM.wrapper.find('.c-fullscreen__btn');
    this.DOM.btn.on("click", this.onClick.bind(this))
  }

  this.onClick = function () {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen();
    } else {
      if (document.exitFullscreen) {
        document.exitFullscreen();
      }
    }
  }
}

FullscreenCtrl.prototype = new BaseClass();
FullscreenCtrl.prototype.constructor = FullscreenCtrl;
function HeaderCtrl() {
  this.init = function () {
    this.DOM.top = $('.c-header__anim-top');
    this.DOM.bottom = $('.c-header__anim-bottom');
    this.createTimeline();
    
    window.test = this;

    $(document).on('logo-end-animation', function () {
      this.timeline.play();
    }.bind(this));
  }

  this.createTimeline = function() {
    this.timeline = new TimelineMax({
      paused: true
    })
      .staggerFromTo(this.DOM.top, 1.4, {
        y: -40,
        autoAlpha: 0,
      }, {
        y: 0,
        autoAlpha: 1,
        clearProps: 'all',
        ease: Expo.easeOut,
      }, 0.05, 2)
      .staggerFromTo(this.DOM.bottom, 1.4, {
        y: 40,
        autoAlpha: 0,
      }, {
        y: 0,
        clearProps: 'all',
        autoAlpha: 1,
        ease: Expo.easeOut,
      }, 0.05, 2)
  }
}

HeaderCtrl.prototype = new BaseClass();
HeaderCtrl.prototype.constructor = HeaderCtrl;
function LayerCtrl() {

	this.init = function() {
		this.isOpen = this.DOM.wrapper.data('layer-is-open');
		this.id = this.DOM.wrapper.data('layer-id');
		this.timeline = undefined;
		this.isTransitionActive = false;
		this[this.isOpen ? 'onOpen' : 'onClose']($.extend({}, this.DOM.wrapper.data(), { noTransition: true }));

		$('[data-open-layer="' + this.id + '"]').on('click', function(e) {
			if (this.isTransitionActive) return;
			e.preventDefault();
			$(document).trigger('open-layer', $(e.currentTarget).data());
		}.bind(this));
		
		$('[data-close-layer="' + this.id + '"]').on('click', function(e) {
			if (this.isTransitionActive) return;
			e.preventDefault();
			$(document).trigger('close-layer', $(e.currentTarget).data());
		}.bind(this));

		$(document)
			.on('open-layer', function (event, data) {
				if (this.isTransitionActive) return;
				if (data.openLayer === this.id && !this.isOpen) this.onOpen(data)
			}.bind(this))
			.on('close-layer', function (event, data) {
				if (this.isTransitionActive) return;
				if (data.closeLayer === this.id && this.isOpen) this.onClose(data)
			}.bind(this));
	}
	
	this.onOpen = function(data) {
		if (!data.preventCloseLayer) {
			OPEN_LAYER.forEach(function(l) { $(document).trigger('close-layer', { closeLayer: l })});
		}
		OPEN_LAYER.push(this.id);
		this.isOpen = true;
		
		if (!data.noTransition) {
			if (this.timeline) this.timeline.kill();
			this.isTransitionActive = true;
			this.timeline = new TimelineLite({
				onStart: function() {
					this.DOM.wrapper.show();
				}.bind(this),
				onComplete: function() {
					this.isTransitionActive = false;
					$(document).trigger('open-layer-end', { openLayer: this.id });
				}.bind(this),
			})
				.add(ANIMATION[this.DOM.wrapper.data("enterAnim")]({ $wrapper: this.DOM.wrapper}))
		}

		this.showOpenElement();
		this.toggleHtmlClass();
	}

	this.onClose = function (data) {
		OPEN_LAYER = OPEN_LAYER.filter(function(l) { return l !== this.id }.bind(this));
		this.isOpen = false;

		if (!data.noTransition) {
			if (this.timeline) this.timeline.kill();
			this.isTransitionActive = true;
			this.timeline = new TimelineLite({
				onComplete: function () {
					this.isTransitionActive = false;
					this.DOM.wrapper.hide();
					$(document).trigger('close-layer-end', { closeLayer: this.id });
				}.bind(this)
			})
				.add(ANIMATION[this.DOM.wrapper.data("leaveAnim")]({ $wrapper: this.DOM.wrapper }))
		}

		this.showCloseElement();
		this.toggleHtmlClass();
	}

	this.toggleHtmlClass = function (params) {
		$('html')[OPEN_LAYER.length > 0 ? 'addClass' : 'removeClass']('layer-is-open')
	}

	this.showOpenElement = function() {
		$('[data-layer-show="' + this.id + '"]')
			.add('[data-layer-show="all"]')
			.fadeIn();
		$('[data-layer-hide="' + this.id + '"]')
			.add('[data-layer-hide="all"]')
			.fadeOut();
	}

	this.showCloseElement = function () {
		$('[data-layer-show="' + this.id + '"]')
			.add('[data-layer-show="all"]')
			.fadeOut();
		$('[data-layer-hide="' + this.id + '"]')
			.add('[data-layer-hide="all"]')
			.fadeIn();
	}
}

LayerCtrl.prototype = new BaseClass();
LayerCtrl.prototype.constructor = LayerCtrl;
function LogoCtrl() {

	this.init = function() {
    this.DOM.logo = this.DOM.wrapper.find('.c-logo__img')
    this.DOM.intro = this.DOM.wrapper.find('.c-logo__intro')
    this.DOM.wrapperEnter = this.DOM.wrapper.find('.c-logo__wrapper-enter')
    this.DOM.enter = this.DOM.wrapper.find('.c-logo__enter')
    // $(document).on('autoplay-prevented', this.onAutoPlayPrevented.bind(this));
    // $(document).on('autoplay-started', this.onEnterAnimation.bind(this));

    this.DOM.enter.on("click", function () {
      this.onLeaveAnimation();
      $(document).trigger('play-sound');
    }.bind(this));
    this.onEnterAnimation();
  }

  this.onEnterAnimation = function() {
    var introLines = new SplitText(this.DOM.intro, { type: "lines" }).lines

    var timeline = new TimelineMax()
      .set(this.DOM.logo, { autoAlpha: 1 })
      .fromTo(this.DOM.logo.find('#logo-mask path'), 3, {
        drawSVG: '0%',
      }, {
        drawSVG: '100%',
        ease: Expo.easeInOut,
      }, 0.5)
      .set(this.DOM.intro, { opacity: 1 }, "-=1")
      .staggerFromTo(introLines, 2.4, {
        opacity: 0,
        y: 40,
      }, {
        y: 0,
        opacity: 1,
        ease: Power3.easeOut,
      }, 0.12, "-=0.5")
      .fromTo(this.DOM.wrapperEnter, 1.4, {
        autoAlpha: 0,
        y: 20,
      }, {
        autoAlpha: 1,
        visibility: 'visible',
        y: 0,
        ease: Expo.easeOut,
      }, '-=1.4')
  }

  this.onLeaveAnimation = function() {
    this.DOM.wrapperEnter.css("pointer-events", "none")
    new TimelineMax()
      .to(this.DOM.logo.find('#logo-mask path'), 2, {
        drawSVG: '0%',
        ease: Expo.easeInOut,
      })
      .staggerTo(this.DOM.wrapperEnter.add(this.DOM.intro.find('div')), 1, {
        autoAlpha: 0,
        y: 20,
        ease: Expo.easeIn,
      }, -0.12, "-=2")
      .add(ANIMATION.maskToBottom({ $wrapper: this.DOM.wrapper }), "-=0.5")
      .set(this.DOM.wrapper, {
        display: 'none',
      })
      .call(function() {
        $(document).trigger('logo-end-animation');
      }, null, null)
  }
}

LogoCtrl.prototype = new BaseClass();
LogoCtrl.prototype.constructor = LogoCtrl;
var MenuAnimation = {
	enter: function(DOM) {
		return new Promise(function() {
			var items = DOM.wrapper
				.find('.c-menu__item')
				.add($('.c-menu__info').children())
				.add(DOM.wrapper);

			new TimelineLite()
				.set(items, { clearProps: 'all' })
				.staggerFrom(items, 0.7, {
					y: -80,
					opacity: 0,
					clearProps: 'all',
					ease: Expo.easeOut,
				}, 0.05, 0.3)
		})
	},
	leave: function (DOM, exclude) {
		return new Promise(function(resolve) {
			var items = DOM.wrapper.find('.c-menu__item').add($('.c-menu__info').children());

			if (exclude) items = items.not(exclude);

			new TimelineLite()
				.staggerTo(items, 0.3, {
					y: -40,
					opacity: 0,
					ease: Expo.easeIn,
				}, -0.05)
				.set(DOM.wrapper, { display: 'none' })
		})
	},
	enterEditorial: function(DOM) {
		new TimelineLite()
			.staggerFrom(DOM.children)
	}
}
function MenuCtrl() {
	this.init = function() {
		Object.assign(this.DOM, {
			manifestoBtn: $('.c-menu__item-29', this.DOM.wrapper),
		})

		this.editorialCtrl = $(document).triggerHandler('getControllersByWrapper', {
			wrapper: $('[data-layer-id="menu"]'),
			type: 'EditorialCtrl'
		});

		$(document).on('open-layer', function (event, data) {
			if (data.openLayer === 'menu') {
				if (this.editorialCtrl) this.editorialCtrl.DOM.wrapper.hide();
				MenuAnimation.enter(this.DOM)
			}
		}.bind(this));
		$(document).on('close-layer', function (event, data) {
			if (data.closeLayer === 'menu') {
				if (this.editorialCtrl) EditorialAnimation.leave(this.editorialCtrl.DOM);
				MenuAnimation.leave(this.DOM)
			}
		}.bind(this));

		if (this.editorialCtrl) {
			this.DOM.manifestoBtn.on('click', function(e) {
				e.preventDefault();
				MenuAnimation.leave(this.DOM, !Modernizr.touchevents ? this.DOM.manifestoBtn : undefined);
				setTimeout(function() {
					EditorialAnimation.enter(this.editorialCtrl.DOM, !Modernizr.touchevents ? this.editorialCtrl : undefined);
				}.bind(this), 300);
			}.bind(this))
		}
	}
}

MenuCtrl.prototype = new BaseClass();
MenuCtrl.prototype.constructor = MenuCtrl;
function ProtonCtrl() {

	this.init = function() {
    if (typeof window.getComputedStyle(document.body).mixBlendMode === 'undefined') return;
    this.image = null;
    this.imageSrc = window.location.origin;
    if (window.location.pathname.indexOf("staging") > -1) {
      this.imageSrc += window.location.pathname;
    }
    this.imageSrc += "particle.png";

    this.loadImage().then(function() {
      this.DOM.wrapper[0].width = window.innerWidth;
      this.DOM.wrapper[0].height = window.innerHeight;
      this.createProton();
      this.addEvents();
      this.tick();
    }.bind(this))
  }

  this.loadImage = function() {
    return new Promise(function(resolve) {
      this.image = new Image();
      this.image.onload = function() {
        resolve();
      };
      this.image.src = this.imageSrc;
    }.bind(this))
  }

  this.createProton = function() {
    this.proton = new Proton();
    this.emitter = new Proton.Emitter();
    this.emitter.rate = new Proton.Rate(Proton.getSpan(0, 0), Proton.getSpan(.01, .015));
    this.emitter.addInitialize(new Proton.Mass(1));
    this.emitter.addInitialize(new Proton.Life(.1, 0.6));
    this.emitter.addInitialize(new Proton.Body(this.image));
    this.emitter.addBehaviour(new Proton.Color("#000000"));
    this.emitter.addInitialize(new Proton.Radius(7));
    this.emitter.addInitialize(new Proton.Velocity(0, Proton.getSpan(0, 0), "polar"));
    this.emitter.addBehaviour(new Proton.Alpha(1, 0));
    this.emitter.addBehaviour(new Proton.Scale(4, 4));
    this.emitter.emit();
    this.proton.addEmitter(this.emitter)
    this.renderer = new Proton.WebGLRenderer(this.DOM.wrapper[0]);
    this.renderer.blendFunc("ONE", "ONE");
    this.proton.addRenderer(this.renderer);
  }
  
  this.addEvents = function() {
    if ($('html').is('.touchevents')) {
      window.addEventListener('touchmove', function(e) {
        this.moveProton(e.touches[0].clientX, e.touches[0].clientY);
      }.bind(this), { passive: false });
    } else {
      $(document).on("mousemove", function(e) {
        e.preventDefault();
        this.moveProton(e.clientX, e.clientY);
      }.bind(this));
    }
  }
    
  this.moveProton = function(x, y) {
    this.emitter.p.x = x;
    this.emitter.p.y = y;
    this.emitter.rate = new Proton.Rate(new Proton.Span(1, 3), new Proton.Span(.01, .01));
    
    clearTimeout(this.timeout);
    this.timeout = setTimeout(function () {
      clearTimeout(this.timeout);
      this.emitter.rate = new Proton.Rate(new Proton.Span(0, 0), new Proton.Span(.01, .01));
    }.bind(this), 40);
  }

  this.tick = function() {
    requestAnimationFrame(this.tick.bind(this));
    this.proton.update()
  }
}

ProtonCtrl.prototype = new BaseClass();
ProtonCtrl.prototype.constructor = ProtonCtrl;
function RevealCtrl() {
	this.init = function () {
		Object.assign(this.DOM, {
			trigger: $('.c-reveal__trigger', this.DOM.wrapper),
			content: $('.c-reveal__content', this.DOM.wrapper),
		})
		this.DOM.wrapper
			.on('mouseenter', this.onTriggerMouseEnter.bind(this))
			.on('mouseleave', this.onTriggerMouseLeave.bind(this));
	}

	this.onTriggerMouseEnter = function() {
		this.DOM.trigger.fadeOut();
		this.DOM.content.fadeIn();
	}

	this.onTriggerMouseLeave = function () {
		this.DOM.trigger.fadeIn();
		this.DOM.content.fadeOut();
	}
}

RevealCtrl.prototype = new BaseClass();
RevealCtrl.prototype.constructor = RevealCtrl;
function ShareCtrl() {
	this.init = function () {
		Object.assign(this.DOM, {
			facebook: $('.c-share__btn--facebook', this.DOM.wrapper),
			twitter: $('.c-share__btn--twitter', this.DOM.wrapper),
		})
		this.DOM.facebook.on('click', this.openUrl.bind(this, 'facebook'))
		this.DOM.twitter.on('click', this.openUrl.bind(this, 'twitter'))
	}

	this.openUrl = function(social, e) {
		e.preventDefault();
		var url = window.location.origin + window.location.pathname + "?" + this.DOM.wrapper.data("share-query");
		var title = this.DOM.wrapper.data("share-title");
    var description = "Pasticceria Adami a San Giovanni Lupatoto - Verona";
		if (social === 'facebook') {
			url = "https://www.facebook.com/sharer/sharer.php?u=" + url;
		} else {
			url = "http://twitter.com/share?text=" + title + " - "  + description + "&url=" + url;
		}
		window.open(url, "_blank", "toolbar=yes,scrollbars=yes,resizable=yes,top=500,left=500,width=800,height=600");
	}
}

ShareCtrl.prototype = new BaseClass();
ShareCtrl.prototype.constructor = ShareCtrl;
var SliderAnimation = {
  enter: function (DOM, index, oldIndex, excludeImage) {
    return new Promise(function (resolve) {
      var title = DOM.slide.eq(index).find('.c-info__title');
      var subTitle = DOM.slide.eq(index).find('.c-info__subtitle');
      var hyphenated = DOM.slide.eq(index).find('.c-info__hyphenated');
      var image = DOM.image.eq(index);
      
      var btn = $('.c-slider__controls--btn');
      var prev = $('.c-slider__controls--prev');
      var next = $('.c-slider__controls--next');

      var prevReplace = $('.c-slider__controls-prev-replace').children();
      var nextReplace = $('.c-slider__controls-next-replace').children();
      var splitText = new SplitText(title, { type: "chars" });
      var timeline = new TimelineLite({
        onComplete: function () {
          splitText.revert();
          resolve();
        },
      })

      var firstTime = typeof (oldIndex) === 'undefined' ? 0.6 : 0;

      timeline
        .set(DOM.slide.eq(index), { opacity: 1 })
      if (!excludeImage) {
        timeline
          .call(function () {
            image.appendTo(DOM.images);
          })
          .fromTo(image, 1, {
            opacity: 0,
            scale: 1.2,
          }, {
            opacity: 1,
            scale: 1,
            ease: Power2.easeOut,
          }, 0)
      }
      timeline
        .staggerFrom(splitText.chars, 0.5, {
          opacity: 0,
          yPercent: 30,
          scale: 1.2,
          ease: Expo.easeOut,
        }, 0.04, 0.1 + firstTime)
        .from([
          prevReplace,
          nextReplace,
        ], 0.4, {
          cursor: 'default',
          clearProps: 'all',
          opacity: 0,
        }, {
          cursor: 'pointer',
          opacity: 1,
        }, 0.3)
        .staggerFrom([
          subTitle,
          hyphenated,
        ], 0.3, {
          cycle: {
            xPercent: function (index, target) {
              return index % 2 === 0 ? -20 : 20;
            }
          },
          opacity: 0,
          ease: Power2.easeOut,
        }, 0, 0.2 + firstTime)

      if (typeof (oldIndex) === 'undefined' && !CONST.isMobile) {
        timeline
          .fromTo(prev, 1, {
            autoAlpha: 0,
            x: 80,
          }, {
            autoAlpha: 1,
            x: 0,
            ease: Expo.easeOut,
          }, 1.2)
          .fromTo(next, 1, {
            autoAlpha: 0,
            x: -80,
          }, {
            autoAlpha: 1,
            x: 0,
            ease: Expo.easeOut,
          }, 1.2)
        }

      if (typeof (oldIndex) === 'undefined') {
        timeline.to(btn, .5, { opacity: 1 }, '+=0.5')
      }

    })
  },
  leave: function (DOM, index) {
		return new Promise(function (resolve) {
			var title = DOM.slide.eq(index).find('.c-info__title');
			var subTitle = DOM.slide.eq(index).find('.c-info__subtitle');
			var hyphenated = DOM.slide.eq(index).find('.c-info__hyphenated');
			var prevReplace = $('.c-slider__controls-prev-replace').children();
      var nextReplace = $('.c-slider__controls-next-replace').children();
			var image = DOM.image.eq(index);

			var splitText = new SplitText(title, { type: "chars" });
		
			new TimelineLite({
				onComplete: function() {
					splitText.revert();
					TweenMax.set([
						subTitle,
						hyphenated,
					], { clearProps: 'all' });
					resolve();
				},
			})
				.staggerTo(splitText.chars, 0.3, {
					opacity: 0,
					scale: 0.8,
					ease: Expo.easeOut,
				}, -0.04, 0)
				.to([
          prevReplace,
          nextReplace,
				], 0.2, {
					opacity: 0,
				}, 0.2)
				.staggerTo([
					subTitle,
					hyphenated,
				], 0.2, {
					cycle: {
						xPercent: function (index, target) {
							return index % 2 === 0 ? -20 : 20;
						}
					},
					opacity: 0,
					ease: Power3.easeIn,
				}, 0, 0)
				.set(DOM.slide.eq(index), { opacity: 0 })
		});
	}
}
function SliderCtrl() {

	this.init = function() {
		Object.assign(this.DOM, {
			images: $(".c-slider__images", this.DOM.wrapper),
			image: $(".c-slider__image", this.DOM.wrapper),
			slide: $(".c-slider__slide", this.DOM.wrapper),
			prev: $(".c-slider__controls--prev", this.DOM.wrapper),
			next: $(".c-slider__controls--next", this.DOM.wrapper),
			prevReplace: $(".c-slider__controls-prev-replace", this.DOM.wrapper),
			nextReplace: $(".c-slider__controls-next-replace", this.DOM.wrapper),
			play: $(".c-slider__controls--btn", this.DOM.wrapper),
			circleProgress: $('.c-circular-btn__circle--progress', this.DOM.wrapper),
		})

		this.transitionIsActive = false;
		this.index = undefined;
		this.length = this.DOM.image.length;

		this.DOM.prev.on('click', this.goToPrev.bind(this));
		this.DOM.next.on('click', this.goToNext.bind(this));

		this.videoCtrl = $(document).triggerHandler('getControllersByWrapper', {
			wrapper: this.DOM.wrapper,
			type: 'VideoCtrl'
		});

		this.playCtrl = $(document).triggerHandler('getControllersByWrapper', {
			wrapper: this.DOM.wrapper,
			type: 'CircularBtnCtrl'
		});
	
		this.youtubePlayCtrl = $(document).triggerHandler('getControllersByWrapper', {
			wrapper: $('[data-layer-id="youtube-video"]'),
			type: 'CircularBtnCtrl'
		});

		this.youtubeVideoCtrl = $(document).triggerHandler('getControllersByWrapper', {
			wrapper: $('[data-layer-id="youtube-video"]'),
			type: 'YoutubeVideoCtrl'
		});
		
		this.shareCtrl = $(document).triggerHandler('getControllersByWrapper', {
			wrapper: this.youtubeVideoCtrl.DOM.wrapper,
			type: 'ShareCtrl'
		});

		$(document).on('open-layer', this.onOpenLayer.bind(this));
		$(document).on('close-layer', this.onCloseLayer.bind(this));
		$(document).on('close-layer-end', this.onCloseLayerEnd.bind(this));

		this.DOM.wrapper
			.on('touchmove', function(e) {
				e.preventDefault();
			})
			.swipe({
				swipeRight: this.goToPrev.bind(this),
				swipeLeft: this.goToNext.bind(this),
				fallbackToMouseEvents: false,
			})

		UTILS.preloadYoutubeApi();

    $(document).on('logo-end-animation', function() {
      var index = this.DOM.wrapper.data('slider-index');
      this.goToIndex(index || 0, typeof (index) !== 'undefined');
    }.bind(this));
	}

	this.preload = function() {
		return Promise.all([UTILS.preloadYoutubeApi()])
	}

	this.goToPrev = function() {
		this.goToIndex(UTILS.prevIndex(this.index, this.length))
	}

	this.goToNext = function() {
		this.goToIndex(UTILS.nextIndex(this.index, this.length))
	}

	this.getCurrentSlideData = function() {
		return this.DOM.slide.eq(this.index).data();
	}

	this.goToIndex = function(index, openVideo) {
		if (index === this.index || this.transitionIsActive) return;
		this.oldIndex = this.index;
		this.index = index;
		this.transitionIsActive = true;
		
		var data = this.getCurrentSlideData();
		this.DOM.play.data('layer-youtube-id', data.slideYoutubeId);
		
		if (openVideo) {
			setTimeout(function() {
				$(document).trigger('open-layer', {
					openLayer: 'youtube-video',
					layerYoutubeId: data.slideYoutubeId,
				})
			}, 1500)
		}

		this.shareCtrl.DOM.wrapper
			.data('share-query', "video-id=" + data.slideId)
			.data('share-title', data.slideTitle)
			.data('share-description', data.slideDescription);
		
		var leavePromise = typeof(this.oldIndex) !== 'undefined' ? SliderAnimation.leave(this.DOM, this.oldIndex) : Promise.resolve();
		
		setTimeout(function() { this.playCtrl.anim() }.bind(this), typeof (this.oldIndex) === 'undefined' ? 2000 : 0);
		
		leavePromise.then(function(resolve) {
			return this.videoCtrl[this.index].preload();
		}.bind(this)).then(function () {
			this.playCurrentVideo();
			this.DOM.prevReplace.html(this.DOM.slide.eq(UTILS.prevIndex(this.index, this.length)).data('slide-subtitle'));
			this.DOM.nextReplace.html(this.DOM.slide.eq(UTILS.nextIndex(this.index, this.length)).data('slide-subtitle'));
			return SliderAnimation.enter(this.DOM, this.index, this.oldIndex);
		}.bind(this)).then(function() {
			if (typeof (this.oldIndex) !== 'undefined') {
				this.videoCtrl[this.oldIndex].seekVideo(0);
				this.videoCtrl[this.oldIndex].pauseVideo();
			}
			this.transitionIsActive = false;
		}.bind(this));

	}

	this.onOpenLayer = function(event, data) {
		if (data.openLayer === 'youtube-video') {
			this.youtubeVideoCtrl.createVideo(data.layerYoutubeId)
			this.youtubePlayCtrl.anim();
		}
		if (data.openLayer === 'menu') {
			SliderAnimation.leave(this.DOM, this.index);
		}
	}

	this.onCloseLayerEnd = function (event, data) {
		if (data.closeLayer === 'youtube-video') {
			this.youtubeVideoCtrl.destroy()
		}
	}
	
	this.onCloseLayer = function (event, data) {
		if (data.closeLayer === 'menu') {
			SliderAnimation.enter(this.DOM, this.index, undefined, true);
			this.playCurrentVideo();
    }
    if (data.closeLayer === 'youtube-video') {
      this.youtubeVideoCtrl.muteVideo()
    }
	}

	this.onMouseWheelUp = function (dir) {
		if (OPEN_LAYER.length === 0) {
			this.goToPrev();
		}
	}

	this.onMouseWheelDown = function(dir) {
		if (OPEN_LAYER.length === 0) {
			this.goToNext();
		}
	}

	this.playCurrentVideo = function() {
		// setTimeout is used to avoid video playback interrupted by opacity 0
		setTimeout(function() { this.videoCtrl[this.index].playVideo(); }.bind(this), 100);
	}

}

SliderCtrl.prototype = new BaseClass();
SliderCtrl.prototype.constructor = SliderCtrl;
function SoundCtrl() {

	this.init = function() {
    this.DOM.btn = this.DOM.wrapper.find('.c-sound__btn');
    this.DOM.audio = this.DOM.wrapper.find('.c-sound__audio');
    this.DOM.btn.on("click", this.onBtnClick.bind(this));
    
    $(document).on('play-sound', this.onPlay.bind(this));
    $(document).on('pause-sound', this.onPause.bind(this));
    
    setTimeout(function() {
      $(document).on('open-layer', function (event, data) {
        if (data.openLayer === 'youtube-video') {
          this.oldVideoState = this.DOM.audio[0].paused ? 'paused' : 'play';
          this.onPause();
        }
      }.bind(this));
  
      $(document).on('close-layer', function (event, data) {
        if (data.closeLayer === 'youtube-video') {
          if (this.oldVideoState === 'play') {
            this.onPlay();
          } else {
            this.onPause();
          }
        }
      }.bind(this));
    }.bind(this));
    
    this.DOM.audio[0].pause();

    // var promise = this.onPlay();
    // if (promise !== undefined) {
    //   promise.then(function () {
    //     $(document).trigger('autoplay-started');
    //   }).catch(function (error) {
    //     this.onPause();
    //     $(document).trigger('autoplay-prevented');
    //   }.bind(this));
    // }
  }

  this.onBtnClick = function() {
    if (this.DOM.audio[0].paused) {
      this.onPlay();
    } else {
      this.onPause();
    }
  }

  this.onPlay = function () {
    var promise = this.DOM.audio[0].play();
    this.DOM.btn.text('Sound off');
    this.DOM.wrapper.fadeInWithHide();
    TweenMax.fromTo(this.DOM.audio[0], 1, {
      volume: 0
    }, {
      volume: 1
    })
    return promise;
  }

  this.onPause = function () {
    this.DOM.btn.text('Sound on');
    this.DOM.wrapper.fadeInWithHide();
    TweenMax.fromTo(this.DOM.audio[0], 1, {
      volume: 1,
    }, {
      volume: 0,
      onComplete: function () {
        this.DOM.audio[0].pause();
      }.bind(this)
    })
  }

}

SoundCtrl.prototype = new BaseClass();
SoundCtrl.prototype.constructor = SoundCtrl;
function VideoCtrl() {

	this.init = function() {
		this.preloadedVideo = undefined;
		this.src = this.DOM.wrapper.attr('src');
	}

	this.preload = function() {
		return new Promise(function(resolve) {
			if (this.preloadedVideo) {
				this.onResize();
				resolve()
			} else {
				this.DOM.wrapper[0].load()
				this.DOM.wrapper.on('canplay', function() {
					PRELOADED.push({
						src: this.src,
						width: this.DOM.wrapper[0].videoWidth,
						height: this.DOM.wrapper[0].videoHeight,
					});
					this.preloadedVideo = PRELOADED.find(function (v) { return v.src === this.src }.bind(this));
					this.onResize();
					this.DOM.wrapper.off('canplay');
					resolve()
				}.bind(this))
			}
		}.bind(this))
	}

	this.pauseVideo = function() {
		this.DOM.wrapper[0].pause();
	}

	this.seekVideo = function (currentTime) {
		this.DOM.wrapper[0].currentTime = currentTime;
	}
	
	this.playVideo = function () {
		this.DOM.wrapper[0].play();
	}

	this.onResize = function() {
		if (!this.preloadedVideo) return;
		var size = UTILS.getRenderedSize(
			false,
			this.DOM.wrapper.parent().width(),
			this.DOM.wrapper.parent().height(),
			this.preloadedVideo.width,
			this.preloadedVideo.height
		);
		this.DOM.wrapper.width(size.width);
		this.DOM.wrapper.height(size.height);
	}

}

VideoCtrl.prototype = new BaseClass();
VideoCtrl.prototype.constructor = VideoCtrl;
function WallCtrl() {
	this.init = function () {
		Object.assign(this.DOM, {
			items: $(),
		})
		$(document).on('social-wall-updated', this.animChildren.bind(this));
		$(window).scroll('reveal-scroll', this.onScroll.bind(this));
	}
	
	this.onScroll = function() {
		var scrollTop = $(window).scrollTop();
		this.DOM.items.each(function(index, $el) {
			if ($($el).offset().top <= (scrollTop + window.innerHeight)) {
				this.onReveal($($el));
			}
		}.bind(this));
	}

	this.onReveal = function($el) {
		if ($el.is('.revealed')) return;
		$el.addClass('revealed');
		TweenMax.fromTo($el, 0.6, {
			opacity: 0,
			y: 150,
		}, {
			delay: 0.15 * Math.floor($el.offset().left / (window.innerWidth / 3)),
			opacity: 1,
			y: 0,
			ease: Power3.easeOut,
		})
	}

	this.animChildren = function() {
		Object.assign(this.DOM, {
			items: this.DOM.wrapper.find('.sbi_item'),
		})
		setTimeout(this.onScroll.bind(this), 200);
	}
}

WallCtrl.prototype = new BaseClass();
WallCtrl.prototype.constructor = WallCtrl;
function YoutubeVideoCtrl() {

	this.init = function() {
		Object.assign(this.DOM, {
			actions: $(".c-youtube-video__actions", this.DOM.wrapper),
			action: $(".c-youtube-video__action", this.DOM.wrapper),
			player: $(".c-youtube-video__player", this.DOM.wrapper),
			progress: $(".c-youtube-video__bar--progress", this.DOM.wrapper),
			controls: $(".c-youtube-video__controls", this.DOM.wrapper),
		})

		this.DOM.action
			.fadeOut()
			.on('click', this.onActionClick.bind(this))
    this.DOM.player.on('click', this.onPlayerClick.bind(this));

    this.isMobile = $('html').hasClass('is-mobile');
    this.mouseMoveTimeout = undefined;
		this.player = null;
		this.playerState = 3;
		this.videoSize = {
			width: 1920,
			height: 1080,
		};

    this.circularBtnCtrl = $(document).triggerHandler('getControllersByWrapper', {
      wrapper: $('[data-layer-id="youtube-video"]'),
      type: 'CircularBtnCtrl'
    });
    
    if (this.DOM.wrapper.data('youtube-id')) this.createVideo(this.DOM.wrapper.data('youtube-id'));
    
    this.DOM.wrapper[0].addEventListener('touchmove', function (e) {
      e.preventDefault();
    }.bind(this), { passive: false });

    this.circularBtnMobileException();
	}
	
	this.createVideo = function(videoId) {
		return new Promise(function(resolve) {
			UTILS.preloadYoutubeApi()
				.then(function () { this.createPlayer(videoId) }.bind(this))
				.then(resolve);
		}.bind(this))
	}

	this.createPlayer = function (videoId) {
		return new Promise(function(resolve) {
  
      TweenMax.from(this.circularBtnCtrl.DOM.wrapper, 1, {
        y: 100,
        autoAlpha: 0,
        clearProps: 'all',
        delay: 0.4,
        ease: Expo.easeOut,
      });

      this.DOM.iframe = $(this.DOM.wrapper[0].appendChild(document.createElement('div')));
      var id = 'youtube-iframe-' + Math.round(Math.random() * 100);
			this.DOM.iframe.attr('id', id)
			this.DOM.layer = $(this.DOM.wrapper[0].appendChild(document.createElement('div')));
			this.DOM.layer.addClass('c-youtube-video__layer u-visible')
      
      if (this.isMobile) {
        var bg = 'https://img.youtube.com/vi/' + videoId + '/maxresdefault.jpg';
        this.DOM.layer.css('background-image', 'url(' + bg + ')');
      }

      this.updatePlayerState()
			this.player = new YT.Player(id, {
				width: this.videoSize.width,
				height: this.videoSize.height * 2,
				playerVars: {
					autoplay: 1,
          rel: 0,
          playsinline: 1,
					controls: 0,
          showinfo: 0,
          modestbranding: 1,
					// muted: 1,
				},
				videoId: videoId,
				events: {
					onReady: function(event) {
            this.onPlayerReady(event);
            resolve();
					}.bind(this),
					onStateChange: this.onPlayerStateChange.bind(this),
				}
			});
		}.bind(this))
	}

	this.pauseVideo = function() {
    this.player.pauseVideo();
	}
	
	this.playVideo = function () {
		this.player.playVideo();
	}

	this.seekVideo = function(second) {
		this.player.seekTo(second);
	}

	this.onPlayerReady = function (event) {
    this.onMouseMove();
    if (!this.isMobile) this.DOM.wrapper.on('mousemove', this.onMouseMove.bind(this));
    this.raf = window.requestAnimationFrame(this.onRaf.bind(this))
		this.onResize();
	}

	this.onPlayerStateChange = function(event) {
		if (
			event.data === YT.PlayerState.PAUSED
			|| event.data === YT.PlayerState.PLAYING
			|| event.data === YT.PlayerState.BUFFERING
			|| event.data === YT.PlayerState.UNSTARTED
			&& event.data !== this.playerState
		) {
			this.playerState = event.data;
			this.updatePlayerState()
		}
		if (event.data === YT.PlayerState.PLAYING) {
			this.DOM.layer.fadeOut();
		}
		if (event.data === YT.PlayerState.ENDED) {
			this.playVideo();
		}
	}

	this.onPlayerClick = function(e) {
		var duration = this.player.getDuration();
		var second = duration * e.offsetX / e.target.clientWidth;
		this.seekVideo(second);
  }

  this.showInterface = function() {
    if (this.isMobile) return;
    this.isInterfaceVisible = true;
    $(this.circularBtnCtrl.DOM.wrapper).add(this.DOM.controls).fadeIn();
  }

  this.hideInterface = function () {
    if (this.isMobile) return;
    this.isInterfaceVisible = false;
    // $(this.circularBtnCtrl.DOM.wrapper).add(this.DOM.controls).fadeOut();
  }
  
  this.onMouseMove = function(e) {
    if (!this.isInterfaceVisible) this.showInterface();
    this.killMouseMoveTimeout();
    this.mouseMoveTimeout = setTimeout(this.hideInterface.bind(this), 1500);
  }

  this.killMouseMoveTimeout = function() {
    clearTimeout(this.mouseMoveTimeout);
  }

	this.onActionClick = function() {
		if (this.player.getPlayerState() !== YT.PlayerState.PAUSED && this.player.getPlayerState() !== YT.PlayerState.PLAYING) return;
		this.player.getPlayerState() === YT.PlayerState.PAUSED ? this.playVideo() : this.pauseVideo();
	}

	this.onResize = function() {
		var size = UTILS.getRenderedSize(
			false,
			this.DOM.wrapper.width(),
			this.DOM.wrapper.height(),
			this.videoSize.width,
			this.videoSize.height
		);

		this.DOM.wrapper.find('iframe')
			.width(size.width)
			.height(size.height * 2);
	}

	this.onRaf = function() {
		if (!this.player.getDuration) return;
		var duration = this.player.getDuration();
		var currentTime = this.player.getCurrentTime();
		var percentage = (100 * currentTime / duration).toFixed(2);
		this.DOM.progress.css('transform', 'scaleX(' + (percentage / 100) + ')');
		this.raf = window.requestAnimationFrame(this.onRaf.bind(this))
	}

	this.updatePlayerState = function() {
		var stateText = $(".c-youtube-video__action--" + this.playerState);
		if (stateText) {
			this.DOM.action.fadeOut();
			stateText.fadeIn();
		}
	}

  this.muteVideo = function() {
    var test = { a: 100 };
    TweenMax.to(test, 1, { a: 0, onUpdate: function() { this.player.setVolume(test.a); }.bind(this)})
  }

	this.destroy = function() {
		if (this.player) {
			this.player.stopVideo();
			this.player.destroy();
    }
    this.killMouseMoveTimeout();
    this.DOM.progress.removeAttr('style');
		this.DOM.action.fadeOut();
		this.DOM.iframe.remove();
		this.DOM.layer.remove();
    this.playerState = 3;
    if ($('html').hasClass('is-mobile')) {
      this.changeCicularBtnText('Play')
    }
		window.cancelAnimationFrame(this.raf);
  }
  
  this.circularBtnMobileException = function() {
    
    if ($('html').hasClass('is-mobile')) {
      this.changeCicularBtnText('Play')
      this.circularBtnCtrl.DOM.wrapper.on('click', this.onCircularBtnClick.bind(this));
    } else {
      this.changeCicularBtnText('Close')
      this.circularBtnCtrl.DOM.wrapper.on('click', this.closeYoutubeVideoLayer.bind(this));
    }
  }

  this.changeCicularBtnText = function(text) {
    if ($('html').hasClass('is-mobile')) {
      this.circularBtnCtrl.DOM.wrapper[text === 'Play' ? 'removeClass' : 'addClass']('c-circular-btn--opacity')
    }
    this.circularBtnCtrl.DOM.wrapper.find('.c-circular__btn.c-cta').text(text);
  }

  this.closeYoutubeVideoLayer = function() {
    $(document).trigger('close-layer', { closeLayer: 'youtube-video' });
  }

  this.onCircularBtnClick = function() {
    if (this.playerState === 3) {
      this.changeCicularBtnText('Close')
      this.playVideo();
    } else {
      this.closeYoutubeVideoLayer();
    }
  }

}

YoutubeVideoCtrl.prototype = new BaseClass();
YoutubeVideoCtrl.prototype.constructor = YoutubeVideoCtrl;
//# sourceMappingURL=scripts.min.js.map